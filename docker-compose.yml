services:
  product-service: # 'product-service' adında bir servis tanımlar
    build: ./product-service #'product-service' klasorundeki Dockerfile built eder.
                              # Bu imaj Dockerfile'ınız kullanılarak oluşturulmuş olmalıdır
    ports:
      - "8088:8080" # Ana makinedeki 8088 portunu konteynerdeki 8080 portuna eşler
                      # (Spring Boot varsayılan portu 8080'dir)
    environment:
      # MySQL için Spring Boot veri kaynağı (datasource) yapılandırması
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-db:3306/productservicedb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=cokgizlisifre
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update # veya üretimde 'validate'; 'create-drop' genellikle H2 içindir
      - SPRING_JPA_DATABASE-PLATFORM=org.hibernate.dialect.MySQLDialect # MySQL dialect'ini belirtir
    depends_on:
      - mysql-db # Docker Compose'a, product-service'ten önce mysql-db'yi başlatmasını söyler

  mysql-db: # 'mysql-db' adında bir MySQL servisi tanımlar
    image: mysql:8.0 # Resmi bir MySQL imajını kullanır
    ports:
      - "33061:3306" # Ana makine portu 33061'i konteyner portu 3306'ya eşler (DB'ye dışarıdan erişim için isteğe bağlı)
    environment:
      - MYSQL_ROOT_PASSWORD=cokgizlisifre
      - MYSQL_DATABASE=productservicedb
    volumes:
      - mysql_data:/var/lib/mysql # MySQL verilerini kalıcı hale getirir
    # İsteğe bağlı: ProductService'in MySQL gerçekten hazır olana kadar beklemesini sağlamak için healthcheck
    # healthcheck:
    #   test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-uroot", "-pcokgizlisifre"]
    #   timeout: 20s
    #   retries: 10

volumes:
  mysql_data: # Veri kalıcılığı için adlandırılmış bir volume tanımlar